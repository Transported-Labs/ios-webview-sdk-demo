trigger:
  batch: true
  branches:
    include:
    - main
    # - develop
    # - testing
    # - staging

variables:
  vmImageMac: 'macos-latest'
  vmImageUbu: 'ubuntu-latest'
  tplProjectName: 'ios-webview-sdk'
  # ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  #   webAppName: prod-dxp
  #   cdnAccountName: proddxpcdn
  #   cdnGroup: prod-dxp-grp
  #   cdnEndpoint: prod-dxp
  #   domainDXP: tldxp.com
  #   saveLast: 10
  #   uriPath: 'webview-sdk/ios'
  #   performPurgeCDN: true
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    webAppName: dev-dxp
    cdnAccountName: devdxpcdn
    cdnGroup: dev-dxp-grp
    cdnEndpoint: dev-dxp
    domainDXP: developdxp.com
    saveLast: 10
    uriPath: 'webview-sdk/ios'
    performPurgeAFD: true
  ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
    webAppName: dev-dxp
    cdnAccountName: devdxpcdn
    cdnGroup: dev-dxp-grp
    cdnEndpoint: dev-dxp
    domainDXP: developdxp.com
    saveLast: 10
    uriPath: 'webview-sdk/ios'
    performPurgeAFD: true
  # ${{ elseif eq(variables['Build.SourceBranchName'], 'testing') }}:
  #   webAppName: test-dxp
  #   cdnAccountName: testdxpcdn
  #   cdnGroup: test-dxp-grp
  #   cdnEndpoint: test-dxp
  #   domainDXP: testingdxp.com
  #   saveLast: 10
  #   uriPath: 'webview-sdk/ios'
  #   # temporary var performPurgeAFD
  #   performPurgeAFD: true
  # ${{ elseif eq(variables['Build.SourceBranchName'], 'staging') }}:
  #   webAppName: stag-dxp
  #   cdnAccountName: stagdxpcdn
  #   cdnGroup: stag-dxp-grp
  #   cdnEndpoint: stag-dxp
  #   domainDXP: stagingdxp.com
  #   saveLast: 10
  #   uriPath: 'webview-sdk/ios'
  #   performPurgeCDN: true
  ${{ elseif eq(variables['Build.Reason'], 'PullRequest') }}:
    cdnAccountName: devdxpcdn
    cdnGroup: dev-dxp-grp
    cdnEndpoint: dev-dxp
    domainDXP: developdxp.com
    saveLast: 10
    uriPath: 'webview-sdk/ios'

parameters:
- name: cdnAccountName
  displayName: cdnAccountName
  type: string
  default: $(cdnAccountName)
- name: cdnGroup
  displayName: cdnGroup
  type: string
  default: $(cdnGroup)
- name: cdnEndpoint
  displayName: cdnEndpoint
  type: string
  default: $(cdnEndpoint)
- name: domainDXP
  displayName: domainDXP
  type: string
  default: $(domainDXP)
- name: deleteOlderCDN
  displayName: deleteOlderCDN
  type: string
  default: $(deleteOlderCDN)
- name: uriPath
  displayName: uriPath
  type: string
  default: $(uriPath)
- name: X_API
  displayName: X_API
  type: string
  default: undefined
- name: webAppName
  type: string
  default: $(webAppName)
- name: customPerformPurgeAFD
  type: boolean
  default: false

stages:
  - stage: build
    displayName: Build stage
    pool:
      vmImage: $(vmImageMac)
    jobs:
      - job: BuildAndPublish
        steps:
          
          - bash: |
              mkdir -p $(Pipeline.Workspace)/WebViewSDK.framework/{debug,release}
            displayName: mkdir -p $(Pipeline.Workspace)/WebViewSDK.framework/{debug,release}

          - task: AzureCLI@2
            displayName: 'Download {debug,release}/WebViewSDK.framework.zip'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # az storage blob download --account-name ${{parameters.cdnAccountName}} --container-name '$web' --file $(Pipeline.Workspace)/WebViewSDK.framework/debug/WebViewSDK.framework.zip --name "webview-sdk/ios/debug/WebViewSDK.framework.zip"

                az storage blob download --account-name ${{parameters.cdnAccountName}} --container-name '$web' --file $(Pipeline.Workspace)/WebViewSDK.framework/release/WebViewSDK.framework.zip --name "webview-sdk/ios/release/WebViewSDK.framework.zip"
              useGlobalConfig: true

          - task: ExtractFiles@1
            displayName: 'Extract ${{ variables.tplProjectName }} ${{ parameters.cdnAccountName }}'
            inputs:
              destinationFolder: ./WebViewDemo/lib
              archiveFilePatterns: $(Pipeline.Workspace)/WebViewSDK.framework/release/WebViewSDK.framework.zip
              cleanDestinationFolder: false
              overwriteExistingFiles: false

          - bash: |
              ls -lFht ./WebViewDemo/lib
            displayName: ls -lFht ./WebViewDemo/lib

          - task: InstallAppleCertificate@2
            inputs:
              certSecureFile: '$(p12FileNameWPL)'
              certPwd: '$(p12Password)'
              keychain: 'temp'
              deleteCert: true 

          - task: InstallAppleProvisioningProfile@1
            inputs:
              provisioningProfileLocation: 'secureFiles'
              provProfileSecureFile: '$(provisioningProfile)'
              removeProfile: true

          - task: Xcode@5
            displayName: 'Build with Xcode'
            inputs:
              actions: 'build'
              scheme: ''
              sdk: 'iphoneos'
              configuration: 'Release'
              xcWorkspacePath: 'WebViewDemo.xcodeproj/project.xcworkspace'
              xcodeVersion: 'default'
              # args: 'CODE_SIGNING_ALLOWED=No CODE_SIGNING_REQUIRED=NO -verbose' # CONFIGURATION_BUILD_DIR=
              packageApp: true
              archivePath: ./build/WebVewDemoRelease.xcarchive  # '$(Build.BinariesDirectory)/build_output'
              exportPath: ./build/output 
              exportOptionsPlist: ./WebViewDemo/ExportOptions.plist
              signingOption: 'manual'
              signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
              provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'

          - script: |
              find ./ -iname "*WebViewDemo.ipa*"
              ls -lFht .//build/output/WebViewDemo.ipa
            displayName: 'show the contents of $(Build.BinariesDirectory)/build_output'

          - upload: .//build/output/WebViewDemo.ipa
            artifact: drop
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - deployment: Deploy
        displayName: Deploy stage
        environment: ${{parameters.cdnAccountName}}

        pool:
          vmImage: $(vmImageUbu)
        strategy:
          runOnce:
            deploy:
              steps:

                - bash: |
                    echo ${{ parameters.cdnAccountName }}
                    echo ${{ parameters.cdnGroup }}
                    echo ${{ parameters.cdnEndpoint }}
                    echo ${{ parameters.domainDXP }}
                    echo ${{ parameters.deleteOlderCDN }}
                    echo ${{ parameters.uriPath }}
                  displayName: Show Parameters Value

                - bash: |
                    cp $(Pipeline.Workspace)/drop/WebViewDemo.ipa $(Pipeline.Workspace)/drop/WebViewDemo.b$(Build.BuildId).ipa
                  displayName: 'COPY WebViewDemo.ipa to WebViewDemo.b$(Build.BuildId).ipa'

                - script: ls -lFht $(Pipeline.Workspace)/drop/
                  displayName: 'show the contents of $(Pipeline.Workspace)/drop/'

                - task: AzureCLI@2
                  displayName: Deploy ${{ variables.tplProjectName }} ${{parameters.cdnAccountName}}
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: 'az storage blob upload-batch -d "\$web/${{ parameters.uriPath }}/release" -s $(Pipeline.Workspace)/drop/ --account-name ${{parameters.cdnAccountName}} --overwrite=true'
                    useGlobalConfig: true

                - task: AzureCLI@2
                  displayName: 'Purge AFD ${{ parameters.cdnAccountName }}'
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e
                      az afd endpoint purge --debug --resource-group ${{parameters.cdnGroup}} --profile-name ${{parameters.cdnEndpoint}}-standard --endpoint-name ${{parameters.cdnEndpoint}}  --content-paths '/*' --domains file.${{ parameters.domainDXP }}
                    useGlobalConfig: true

                - task: AzureCLI@2
                  displayName: Leave the last ${{variables.saveLast}} files for CDN ${{variables.cdnAccountName}} in webview-sdk/ios/release/WebViewDemo.b*
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "------------------------------"
                      echo ""The Last ${{variables.saveLast}} Files" - webview-sdk/ios/release/WebViewDemo.b"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/ios/release/WebViewDemo.b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv
                      echo "------------------------------"
                      echo "Files will be deleted in the ${{variables.saveLast}}"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/ios/release/WebViewDemo.b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv|awk '{print $1}'|head -n -${{variables.saveLast}}
                      echo "------------------------------"
                      echo "Deleting"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/ios/release/WebViewDemo.b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv|awk '{print $1}'|head -n -${{variables.saveLast}} \
                      | xargs -rtL1 -I {} \
                      az storage blob delete-batch --only-show-errors --source \$web --account-name ${{variables.cdnAccountName}} --pattern {}
                    useGlobalConfig: true
